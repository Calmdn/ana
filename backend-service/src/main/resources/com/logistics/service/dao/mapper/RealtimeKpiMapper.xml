<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.logistics.service.dao.mapper.RealtimeKpiMapper">

    <!-- 结果映射 -->
    <resultMap id="RealtimeKpiResultMap" type="com.logistics.service.dao.entity.RealtimeKpi">
        <result column="city" property="city" jdbcType="VARCHAR"/>
        <result column="date" property="date" jdbcType="DATE"/>
        <result column="hour" property="hour" jdbcType="INTEGER"/>
        <result column="total_orders" property="totalOrders" jdbcType="BIGINT"/>
        <result column="active_couriers" property="activeCouriers" jdbcType="INTEGER"/>
        <result column="coverage_aois" property="coverageAois" jdbcType="INTEGER"/>
        <result column="orders_per_courier" property="ordersPerCourier" jdbcType="DOUBLE"/>
        <result column="orders_per_aoi" property="ordersPerAoi" jdbcType="DOUBLE"/>
        <result column="efficiency_score" property="efficiencyScore" jdbcType="DOUBLE"/>
    </resultMap>

    <!-- 基础列定义 -->
    <sql id="Base_Column_List">
        city, date, hour, total_orders, active_couriers, coverage_aois,
        orders_per_courier, orders_per_aoi, efficiency_score
    </sql>

    <!-- 插入或更新KPI数据 -->
    <insert id="insertOrUpdateKpi" parameterType="com.logistics.service.dao.entity.RealtimeKpi">
        INSERT INTO realtime_kpi (
            city, date, hour, total_orders, active_couriers, coverage_aois,
            orders_per_courier, orders_per_aoi, efficiency_score
        ) VALUES (
                     #{city,jdbcType=VARCHAR},
                     #{date,jdbcType=DATE},
                     #{hour,jdbcType=INTEGER},
                     #{totalOrders,jdbcType=BIGINT},
                     #{activeCouriers,jdbcType=INTEGER},
                     #{coverageAois,jdbcType=INTEGER},
                     #{ordersPerCourier,jdbcType=DOUBLE},
                     #{ordersPerAoi,jdbcType=DOUBLE},
                     #{efficiencyScore,jdbcType=DOUBLE}
                 ) ON DUPLICATE KEY UPDATE
                                        total_orders = VALUES(total_orders),
                                        active_couriers = VALUES(active_couriers),
                                        coverage_aois = VALUES(coverage_aois),
                                        orders_per_courier = VALUES(orders_per_courier),
                                        orders_per_aoi = VALUES(orders_per_aoi),
                                        efficiency_score = VALUES(efficiency_score)
    </insert>

    <!-- 批量插入KPI数据 -->
    <insert id="batchInsertKpi" parameterType="java.util.List">
        INSERT INTO realtime_kpi (
        city, date, hour, total_orders, active_couriers, coverage_aois,
        orders_per_courier, orders_per_aoi, efficiency_score
        ) VALUES
        <foreach collection="list" item="item" separator=",">
            (
            #{item.city,jdbcType=VARCHAR},
            #{item.date,jdbcType=DATE},
            #{item.hour,jdbcType=INTEGER},
            #{item.totalOrders,jdbcType=BIGINT},
            #{item.activeCouriers,jdbcType=INTEGER},
            #{item.coverageAois,jdbcType=INTEGER},
            #{item.ordersPerCourier,jdbcType=DOUBLE},
            #{item.ordersPerAoi,jdbcType=DOUBLE},
            #{item.efficiencyScore,jdbcType=DOUBLE}
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
        total_orders = VALUES(total_orders),
        active_couriers = VALUES(active_couriers),
        coverage_aois = VALUES(coverage_aois),
        orders_per_courier = VALUES(orders_per_courier),
        orders_per_aoi = VALUES(orders_per_aoi),
        efficiency_score = VALUES(efficiency_score)
    </insert>

    <!-- 根据城市和日期查找KPI -->
    <select id="findByCityAndDate" resultMap="RealtimeKpiResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM realtime_kpi
        WHERE city = #{city,jdbcType=VARCHAR}
        AND date = #{date,jdbcType=DATE}
        ORDER BY hour ASC
    </select>

    <!-- 根据城市、日期和小时查找KPI -->
    <select id="findByCityAndDateAndHour" resultMap="RealtimeKpiResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM realtime_kpi
        WHERE city = #{city,jdbcType=VARCHAR}
        AND date = #{date,jdbcType=DATE}
        AND hour = #{hour,jdbcType=INTEGER}
    </select>

    <!-- 获取城市最近几天的KPI数据 -->
    <select id="findRecentKpiByCity" resultMap="RealtimeKpiResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM realtime_kpi
        WHERE city = #{city,jdbcType=VARCHAR}
        AND date >= DATE_SUB(CURDATE(), INTERVAL #{days} DAY)
        ORDER BY date DESC, hour DESC
    </select>

    <!-- 获取多个城市的KPI数据 -->
    <select id="findByCitiesAndDate" resultMap="RealtimeKpiResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM realtime_kpi
        WHERE city IN
        <foreach collection="cities" item="city" open="(" separator="," close=")">
            #{city,jdbcType=VARCHAR}
        </foreach>
        AND date = #{date,jdbcType=DATE}
        ORDER BY city ASC, hour ASC
    </select>

    <!-- 获取KPI趋势数据 -->
    <select id="getKpiTrend" resultType="java.util.Map">
        SELECT
        date,
        AVG(efficiency_score) as avg_efficiency_score,
        SUM(total_orders) as daily_total_orders,
        AVG(active_couriers) as avg_active_couriers,
        AVG(coverage_aois) as avg_coverage_aois,
        COUNT(*) as hourly_records
        FROM realtime_kpi
        WHERE city = #{city,jdbcType=VARCHAR}
        <if test="startDate != null">
            AND date >= #{startDate,jdbcType=DATE}
        </if>
        GROUP BY date
        ORDER BY date ASC
    </select>

    <!-- 获取小时级KPI统计 -->
    <select id="getHourlyKpiStats" resultType="java.util.Map">
        SELECT
            hour,
            total_orders,
            active_couriers,
            coverage_aois,
            orders_per_courier,
            orders_per_aoi,
            efficiency_score
        FROM realtime_kpi
        WHERE city = #{city,jdbcType=VARCHAR}
          AND date = #{date,jdbcType=DATE}
        ORDER BY hour ASC
    </select>

    <!-- 获取城市KPI排行 -->
    <select id="getCityKpiRanking" resultType="java.util.Map">
        SELECT
        city,
        SUM(total_orders) as daily_total_orders,
        AVG(efficiency_score) as avg_efficiency_score,
        AVG(active_couriers) as avg_active_couriers,
        AVG(coverage_aois) as avg_coverage_aois,
        COUNT(*) as hourly_records
        FROM realtime_kpi
        WHERE date = #{date,jdbcType=DATE}
        GROUP BY city
        ORDER BY avg_efficiency_score DESC
        <if test="limit != null and limit > 0">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 获取KPI汇总统计 -->
    <select id="getKpiSummary" resultType="java.util.Map">
        SELECT
        COUNT(*) as total_records,
        SUM(total_orders) as total_orders,
        AVG(efficiency_score) as avg_efficiency_score,
        MAX(efficiency_score) as max_efficiency_score,
        MIN(efficiency_score) as min_efficiency_score,
        AVG(active_couriers) as avg_active_couriers,
        AVG(coverage_aois) as avg_coverage_aois,
        COUNT(DISTINCT date) as date_count,
        MIN(date) as earliest_date,
        MAX(date) as latest_date
        FROM realtime_kpi
        WHERE city = #{city,jdbcType=VARCHAR}
        <if test="startDate != null">
            AND date >= #{startDate,jdbcType=DATE}
        </if>
    </select>

    <!-- 获取最新KPI数据 -->
    <select id="findLatestKpiByCity" resultMap="RealtimeKpiResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM realtime_kpi
        WHERE city = #{city,jdbcType=VARCHAR}
        ORDER BY date DESC, hour DESC
        LIMIT 1
    </select>

    <!-- 清理旧的KPI数据 -->
    <delete id="cleanupOldKpi">
        DELETE FROM realtime_kpi
        WHERE date &lt; #{cutoffDate,jdbcType=DATE}
    </delete>

    <!-- 统计KPI记录数 -->
    <select id="countByCity" resultType="int">
        SELECT COUNT(*)
        FROM realtime_kpi
        WHERE city = #{city,jdbcType=VARCHAR}
    </select>

</mapper>